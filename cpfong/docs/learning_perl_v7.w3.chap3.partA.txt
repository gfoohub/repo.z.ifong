array and list

scalar: single
array: plural

my $a=1;
my @fred=(0,1,2,3);

print $fred[0]; # access array element, note start from 0

$blank = $fred[142_587]; # blank will be undef

$fred[-1]=4; # -1 means last element 
$fred[5]='john';

my @b=(0..10);

@c=('a', 'b', 'c');
@d=qw( a b c); # same as above, but cleaner. quote word or quote whitespace
@d=qw/ a b c /; # same as above

my ($a, $b)=(1, 2);
($b, $a)=($a, $b); # swap

p59 push and pop
@arr= 5..9
$fred = pop @arr;

push @arr,10;

while push and pop from the top, shift and unshift from the bottom

@a=1..3;
shift @a
unshift @a,0

splice @array, start_index, how_many_number_to_remove, filled_with_this_list
@a=1..10;
splic @a, 5, 2, (500,600);

insert without remove any thing
--
@arr=(0,1,3,4);
splice @arr, 1, 0, 2

foreach my $rock (qw /bedrock slate lava/){
 print $rock;
}

$_
reverse
sort

each can be used on array (not just hash)

@arr= qw /john chen jack chue/;

while (my ($index,$v)=each @arr){
 print $index, $v, "\n";
}

p66
context (arry or scalar?)

42 + something # must be number
sort something # must be array

@people=qw / fred barney betty /;
$number=42+@people;

@backwards=reverse qw /yabba dabba doo/;
$backwards=reverse qw /yabba dabba doo/; #oodabbadabbay

$rock='shale';
foreach $rock (qw/bedrock slate lava/){
}
print $rock;

p68 example of context

@barney='hello' . ' ' . 'world'; #$barney[0]='hello world'
@wilma=undef;# with one value, but not initialize
@wilma=(); #initialization

